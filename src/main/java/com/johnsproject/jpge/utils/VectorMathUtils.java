package com.johnsproject.jpge.utils;


/**
 * The VectorMathUtils class provides methods for math operations 
 * with 3d and 2d vectors generated by the {@link Vector3Utils} class.
 * 
 * @author JohnÂ´s Project - John Konrad Ferraz Salomon
 * 
 */
public class VectorMathUtils extends MathUtils{
	 
	/**
	 * Adds the values of b to a and returns a.
	 * 
	 * @param a summand vector.
	 * @param b summand vector.
	 * @return a.
	 */
	public static long add(long a, long b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		long bx = Vector3Utils.getX(b), by = Vector3Utils.getY(b), bz = Vector3Utils.getZ(b);
		return Vector3Utils.convert(ax + bx, ay + by, az + bz);
	}
	
	/**
	 * Subtracts the values of b from a and returns a.
	 * 
	 * @param a minuend vector.
	 * @param b subtrahend vector.
	 * @return a.
	 */
	public static long subtract(long a, long b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		long bx = Vector3Utils.getX(b), by = Vector3Utils.getY(b), bz = Vector3Utils.getZ(b);
		return Vector3Utils.convert(ax - bx, ay - by, az - bz);
	}
	
	/**
	 * Multiplies the values of a and b and returns a.
	 * 
	 * @param a multiplier vector.
	 * @param b multiplicand vector.
	 * @return a.
	 */
	public static long multiply(long a, long b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		long bx = Vector3Utils.getX(b), by = Vector3Utils.getY(b), bz = Vector3Utils.getZ(b);
		return Vector3Utils.convert(ax * bx, ay * by, az * bz);
	}
	
	/**
	 * Divides the values of b from a and returns a.
	 * 
	 * @param a dividend vector.
	 * @param b divisor vector.
	 * @return a.
	 */
	public static long divide(long a, long b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		long bx = Vector3Utils.getX(b), by = Vector3Utils.getY(b), bz = Vector3Utils.getZ(b);
		if (bx == 0) bx = 1;
		if (by == 0) by = 1;
		if (bz == 0) bz = 1;
		return Vector3Utils.convert(ax / bx, ay / by, az / bz);
	}
	
	/**
	 * Adds b to a and returns a.
	 * 
	 * @param a summand vector.
	 * @param b summand value.
	 * @return a.
	 */
	public static long add(long a, int b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		return Vector3Utils.convert(ax + b, ay + b, az + b);
	}
	
	/**
	 * Subtracts b from a and returns a.
	 * 
	 * @param a minuend vector.
	 * @param b subtrahend value.
	 * @return a.
	 */
	public static long subtract(long a, int b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		return Vector3Utils.convert(ax - b, ay - b, az - b);
	}
	
	/**
	 * Multiplies the values of a with b and returns a.
	 * 
	 * @param a multiplier vector.
	 * @param b multiplicand value.
	 * @return a.
	 */
	public static long multiply(long a, int b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		return Vector3Utils.convert(ax * b, ay * b, az * b);
	}
	
	/**
	 * Divides b from a and returns a.
	 * 
	 * @param a dividend vector.
	 * @param b divisor value.
	 * @return a.
	 */
	public static long divide(long a, int b) {
		long ax = Vector3Utils.getX(a), ay = Vector3Utils.getY(a), az = Vector3Utils.getZ(a);
		if (b == 0) b = 1;
		return Vector3Utils.convert(ax / b, ay / b, az / b);
	}

	/**
	 * Checks witch of the vectors are greater and returns it.
	 * 
	 * @param a first vector.
	 * @param b second vector.
	 * @return the greatest vector.
	 */
	public static long max(long a, long b) {
		long asum = Vector3Utils.getX(a) + Vector3Utils.getY(a) + Vector3Utils.getZ(a);
		long bsum = Vector3Utils.getX(b) + Vector3Utils.getY(b) + Vector3Utils.getZ(b);
		if(asum > bsum) return a;
		else return b;
	}
	
	/**
	 * Checks witch of the vectors are smaller and returns it.
	 * 
	 * @param a first vector.
	 * @param b second vector.
	 * @return the smallest vector.
	 */
	public static long min(long a, long b) {
		long asum = Vector3Utils.getX(a) + Vector3Utils.getY(a) + Vector3Utils.getZ(a);
		long bsum = Vector3Utils.getX(b) + Vector3Utils.getY(b) + Vector3Utils.getZ(b);
		if(asum > bsum) return b;
		else return a;
	}
	
    /**
     * Moves the given vector by the given angle around the z axis.
     * 
     * @param vector vector that contains position to move.
     * @param angle angle used to move position.
     * @return moved position.
     */
    public static long movePointByAngleZ(long vector, int angle){
    	int sin = sin(angle), cos = cos(angle);
    	long x = Vector3Utils.getX(vector),
    			y = Vector3Utils.getY(vector),
    			z = Vector3Utils.getZ(vector);
    	long vx = ((x * cos - y * sin) >> SHIFT);
    	long vy = ((y * cos + x * sin) >> SHIFT);
    	return Vector3Utils.convert(vx, vy, z);
    }
    
    /**
     * Moves the given vector by the given angle around the y axis.
     * 
     * @param vector vector that contains position to move.
     * @param angle angle used to move position.
     * @return moved position.
     */
    public static long movePointByAngleY(long vector, int angle){
    	int sin = sin(angle), cos = cos(angle);
    	long x = Vector3Utils.getX(vector),
    			y = Vector3Utils.getY(vector),
    			z = Vector3Utils.getZ(vector);
    	long vx = ((x * cos - z * sin) >> SHIFT);
    	long vz = ((z * cos + x * sin) >> SHIFT);
    	return Vector3Utils.convert(vx, y, vz);
    }
    
    /**
     * Moves the given vector by the given angle around the x axis.
     * 
     * @param vector vector that contains position to move.
     * @param angle angle used to move position.
     * @return moved position.
     */
    public static long movePointByAngleX(long vector, int angle){
    	int sin = sin(angle), cos = cos(angle);
    	long x = Vector3Utils.getX(vector),
    			y = Vector3Utils.getY(vector),
    			z = Vector3Utils.getZ(vector);
    	long vy = ((y * cos - z * sin)) >> SHIFT;
    	long vz = ((z * cos + y * sin)) >> SHIFT;
    	return Vector3Utils.convert(x, vy, vz);
    }
    
    /**
     * Moves the given vector by the given angles around the x, y and z axis.
     * 
     * @param vector vector that contains position to move.
     * @param angles vector that contains angles.
     * @return moved position.
     */
    public static long movePointByAnglesXYZ(long vector, long angles){
    	vector = movePointByAngleX(vector, (int)Vector3Utils.getX(angles));
    	vector = movePointByAngleY(vector, (int)Vector3Utils.getY(angles));
    	vector = movePointByAngleZ(vector, (int)Vector3Utils.getZ(angles));
    	return vector;
    }
    
    /**
     * Moves the given vector by the given scale.
     * 
     * @param vector vector that contains position to move.
     * @param scale vector that contains scale.
     * @return moved position.
     */
    public static long movePointByScale(long vector, long scale){
    	return multiply(vector, scale);
    }
    
    /**
     * Returns a vector containing the distance between vector1 and vector2.
     * 
     * @param vector1 fist vector.
     * @param vector2 second vector.
     * @return vector containing the distance between vector1 and vector2.
     */
    public static long getDistance(long vector1, long vector2) {
    	return subtract(vector1, vector2);
    }
}
