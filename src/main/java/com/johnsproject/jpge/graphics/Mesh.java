package com.johnsproject.jpge.graphics;

import java.util.Arrays;

import com.johnsproject.jpge.io.SOMImporter;
import com.johnsproject.jpge.utils.Vector2Utils;
import com.johnsproject.jpge.utils.VertexUtils;

/**
 * The Mesh class contains the data of {@link SceneObject} meshes imported by {@link SOMImporter}. 
 * It contains each vertex, polygon/triangle, material and animation of a {@link SceneObject}.
 * 
 * @author JohnÂ´s Project - John Konrad Ferraz Salomon
 */
public class Mesh {
	
	public static final byte BONE_INDEX = 3, SHADE_FACTOR = 4;
	public static final byte VERTEX_LENGTH = 5;
	private long[] vertexes;
	private long[] vertexesBuffer;
	public static final byte VERTEX_1 = 0, VERTEX_2 = 1, VERTEX_3 = 2;
	public static final byte UV_1 = 4, UV_2 = 5, UV_3 = 6;
	public static final byte MATERIAL_INDEX = 3, CULLED = 7;
	public static final byte POLYGON_LENGTH = 8;
	private int[][] polygons;
	public static final byte UV_LENGTH = 2;
	private int[] uvs;
	public static final byte MATERIAL_LENGTH = 4;
	private Material[] materials;
	public static final byte POSITION = 0, ROTATION = 3, SCALE = 6;
	public static final byte BONE_LENGTH = 9;
	private Animation[] animations;
	private Animation currentAnimation;
	
	/**
	 * Creates a new instance of the Mesh class filled with the given values.
	 * 
	 * @param vertexes an array of vertexes generated by the {@link VertexUtils} class.
	 * @param polygons an array of polygons.
	 * @param uvs an array of uvs generated by the {@link Vector2Utils} class.
	 * @param materials an array of {@link Material Materials}.
	 * @param animations an array of {@link Animation Animations}.
	 */
	public Mesh (long[] vertexes, int[][] polygons, int[] uvs, Material[] materials, Animation[] animations) {
		this.vertexes = vertexes;
		this.vertexesBuffer = vertexes.clone();
		this.polygons = polygons;
		this.uvs = uvs;
		this.materials = materials;
		this.animations = animations;
		this.currentAnimation = animations[0];
	}
	
	/**
	 * Returns all vertexes of this mesh.
	 * 
	 * @return all vertexes of this mesh.
	 */
	public long [] getVertexes(){
		return vertexes;
	}
	
	/**
	 * Returns the vertex at the given index.
	 * 
	 * @param index index of vertex.
	 * @return vertex at the given index.
	 */
	public long getVertex(int index){
		return vertexes[index];
	}
	
	/**
	 * Returns the buffered vertex at the given index.
	 * The buffered vertexes are used by the {@link SceneRenderer} at the rendering process.
	 * This vertexes are transformed, rotated and projected. 
	 * the vertex buffer is a buffer used to prevent loosing original position of vertexes.
	 * 
	 * 
	 * @param index index of buffered vertex.
	 * @return buffered vertex at the given index.
	 */
	public long getBufferedVertex(int index){
		return vertexesBuffer[index];
	}
	
	/**
	 * Sets the buffered vertex at the given index.
	 * The buffered vertexes are used by the {@link SceneRenderer} at the rendering process.
	 * This vertexes are transformed, rotated and projected. 
	 * the vertex buffer is a buffer used to prevent loosing original position of vertexes.
	 * 
	 * @param index index of buffered vertex.
	 * @param vertex vertex to set.
	 */
	public void setBufferedVertex(int index, long vertex){
		vertexesBuffer[index] = vertex;
	}
	
	/**
	 * Resets the vertex buffer of this mesh.
	 * the vertex buffer is a buffer used to prevent loosing original position of vertexes.
	 */
	public void resetBuffer() {
		for (int i = 0; i < vertexes.length; i++) {
			vertexesBuffer[i] = vertexes[i];
		}
	}
	
	/**
	 * Returns all uvs of this mesh.
	 * 
	 * @return all uvs of this mesh.
	 */
	public int [] getUVs(){
		return uvs;
	}
	
	/**
	 * Returns the uv at the given index.
	 * 
	 * @param index index of uv.
	 * @return the uv at the given index.
	 */
	public int getUV(int index){
		if (uvs.length < 2) return uvs[0];
		return uvs[index];
	}
	
	/**
	 * Returns all polygons of this mesh.
	 * 
	 * @return all polygons of this mesh.
	 */
	public int[][] getPolygons() {
		return polygons;
	}
	
	/**
	 * Returns the polygon at the given index.
	 * 
	 * @param index index of polygon.
	 * @return the polygon at the given index.
	 */
	public int[] getPolygon(int index) {
		return polygons[index];
	}
	
	/**
	 * Returns all {@link Material materials} of this mesh.
	 * 
	 * @return all {@link Material materials} of this mesh.
	 */
	public Material[] getMaterials() {
		return materials;
	}
	
	/**
	 * Returns the {@link Material material} at the given index.
	 * 
	 * @param index index of {@link Material material}.
	 * @return the {@link Material material} at the given index.
	 */
	public Material getMaterial(int index) {
		return materials[index];
	}
	
	/**
	 * Sets the animation with the given name as current animation of this mesh.
	 * 
	 * @param name name of animation.
	 */
	public void playAnimation(String name) {
		currentAnimation = getAnimation(name);
	}
	
	/**
	 * Sets the animation with the given id as current animation of this mesh.
	 * 
	 * @param id id of animation.
	 */
	public void playAnimation(int id) {
		currentAnimation = animations[id];
	}
	
	/**
	 * Sets the given animation as current animation of this mesh.
	 * 
	 * @param animation animation to play.
	 */
	public void playAnimation(Animation animation) {
		currentAnimation = animation;
	}
	
	/**
	 * Returns the current animation of this mesh.
	 * 
	 * @return current animation of this mesh.
	 */
	public Animation getCurrentAnimation() {
		return currentAnimation;
	}
	
	/**
	 * Returns the animation at the given index.
	 * 
	 * @param index index of animation.
	 * @return animation at the given index.
	 */
	public Animation getAnimation(int index) {
		return animations[index];
	}
	
	/**
	 * Returns the animation with the given name.
	 * 
	 * @param index index of animation.
	 * @return animation at the given index.
	 */
	public Animation getAnimation(String name) {
		Animation anim = null;
		for (Animation animation : animations) {
			if (animation.getName() == name) anim = animation;
		}
		return anim;
	}
	
	/**
	 * Returns all animations of this mesh.
	 * 
	 * @return all animations of this mesh.
	 */
	public Animation[] getAnimations() {
		return animations;
	}

	@Override
	public String toString() {
		return "Mesh [vertexes=" + Arrays.toString(vertexes) + ", vertexesBuffer=" + Arrays.toString(vertexesBuffer)
				+ ", polygons=" + Arrays.toString(polygons) + ", uvs=" + Arrays.toString(uvs) + ", materials="
				+ Arrays.toString(materials) + ", animations=" + Arrays.toString(animations) + ", currentAnimation="
				+ currentAnimation + "]";
	}	
}
